find.package("devtools")
install.packages()
install.packages("devtools")
find_rtools()
library(devtools)
find_rtools()
?rowMeans
str(tapply)
?str`
)
?str
head
?head
f1<-gl(5,2)
f1
f1<-gl(2,5)
f1
class(f1)
f1<-gl(2,5)
f2<-gl(5,2)
interaction(f1,f2)
list(f1,f2)
?lm
swirl()
swirl
load(swirl)
library(swirl)
swirl()
exit
debug(ls)
ls
ls()
clear
n
n
x<-1
library(datasets)
data(iris)
source('D:/FRANGOS_FOLDER/CoursesCertificates/Coursera_Spec_DataAnalysis_2016/RProgramming/Codes/quiz3_assignment.R')
iris$species
head(iris)
source('D:/FRANGOS_FOLDER/CoursesCertificates/Coursera_Spec_DataAnalysis_2016/RProgramming/Codes/quiz3_assignment.R')
iris[["Species"]]
iris[["Species"]]=="virginica"
source('D:/FRANGOS_FOLDER/CoursesCertificates/Coursera_Spec_DataAnalysis_2016/RProgramming/Codes/quiz3_assignment.R')
split(iris$Sepal.Length, iris$Species)
x<-split(iris$Sepal.Length, iris$Species)
x
x$virginica
mean(x$virginica)
source('D:/FRANGOS_FOLDER/CoursesCertificates/Coursera_Spec_DataAnalysis_2016/RProgramming/Codes/quiz3_assignment.R')
x<-split(iris$Sepal.Length, iris$Species)
source('D:/FRANGOS_FOLDER/CoursesCertificates/Coursera_Spec_DataAnalysis_2016/RProgramming/Codes/quiz3_assignment.R')
source('D:/FRANGOS_FOLDER/CoursesCertificates/Coursera_Spec_DataAnalysis_2016/RProgramming/Codes/quiz3_assignment.R')
debugSource('D:/FRANGOS_FOLDER/CoursesCertificates/Coursera_Spec_DataAnalysis_2016/GettingAndCleaningData/quiz2_windows.R')
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library("swirl")
swirl()
install_from_swirl("Getting_and_Cleaning_Data")
swirl()
swirl()
library(dplyr)
cran <-tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran)
by_package <- group_by(cran,package)
by_package
?summarize
summarize(by_package,mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum,count>quantile(pack_sum$count, probs = 0.99)
)
top_counts<- filter(pack_sum,count>quantile(pack_sum$count, probs = 0.99)
)
top_counts<- filter(pack_sum,count>679)
top_counts
View
View(top_counts)
top_counts_sorted<- arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique<-filter(pack_sum,unique>465)
View
View(top_unique)
top_unique_sorted<- arrange(top_unique,desc(unique)
)
View(top_unique_sorted)
submit()
submi()
submit()
?chain
submit()
View(result3)
submit()
submit()
submit()
submit()
library(dplyr)
library(tidyr)
students
?gather
gather(students,-grade)
gather(students,male,female)
gather(students,sex, count, -grade)
students2
gather(students2,column_sex_class, countres<-)
res<-gather(students2,column_sex_class, countres)
res<-gather(students2,column_sex_class, count)
res<-gather(students2,sex_class, count, -grade)
res
?separate
separate(res,sex_class,c("sex","class"))
?gather
submit()
students3
?gather
students3 %>%
gather( class, grade, class1:class5 , na.rm = TRUE) %>%
)
students3 %>%
gather( class, grade, class1:class5 , na.rm = TRUE)
students3 %>%
gather( class, grade, class1:class5 , na.rm = TRUE) %>%
gather(classN,c("class","N"))
students3 %>%
gather( class, grade, class1:class5 , na.rm = TRUE)
students3
students3 %>%
gather( class, grade, class1:class5, na.rm = TRUE)
submit()
?spread
submit()
submit()
submit()
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread( test, class) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread( test, class) %>%
print
students3
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%print()
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
?unique
submit()
submit()
passed
failed
mutate(passed,status="passed")
passed<-mutate(passed,status="passed")
failed<-mutate(passed,status="failed")
failed<-mutate(failed,status="failed")
pased
passed
failed
bind_rows(passed,failed)
sat
sat %>%
select(-contains("total"))
select(sat,write_total)
sat %>%
select(-contains("total")) %>%
gather(key = part_sex , value = count, -score_range)
sepe
separate()
?separate
submit()
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
### <Your call to group_by()> %>%
group_by(part,sex)
submit()
library(swirl)
swirl()
Sys.getlocale()
wday(this_day, label = TRUE)
now()
this_moment<-now()
this_moment
minute(this_moment)
ymd("1989-05-17")
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdd("March 12, 1975")
mdy("March 12, 1975")
dmy("25081985")
dmy(25081985)
ymd("192012")
ymd("1920--1--2")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment)
update(this_moment,hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment,now())
update(this_moment,hours = hours(now(), minutes = minutes(now()),seconds = seconds(now()))
)
update(this_moment,hours = hours(now()), minutes = minutes(now()),seconds = seconds(now()))
update(this_moment,now())
now()
this_momen<- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_momen<- update(this_moment, hours = 13, minutes = 37, seconds = 0)
this_moment<- update(this_moment, hours = 13, minutes = 37, seconds = 0)
this_moment<- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment<- update(this_moment, hours = 1, minutes = 38, seconds = 0)
this_moment<- update(this_moment, hours = 13, minutes = 38, seconds = 0)
info()
now()
this_moment<- update(this_moment, hours = 13, minutes = 39, seconds = 0)
this_moment
this_moment<- update(this_moment, hours = 13, minutes = 39, seconds = 0)
this_momen
this_moment
this_moment <- update(this_moment, hours = 13, minutes = 39, seconds = 0)
this_moment
this_momen
now()
this_moment<-now
this_day
this_moment
this_moment<-update(this_moment, hours = 10, minutes = 16, seconds = 0)
skip()
this_moment<-update(this_moment, hours = 10, minutes = 16, seconds = 0)
skip()
skip()
Sys.info()
Sys.getlocale()
Sys.getlocale()
Sys.info()
Sys.timezone()
Sys.getlocale("LC_TIME")
Sys.setlocale("LC_MESSAGES", 'en_GB.UTF-8')
Sys.setenv(LANG = "en_US.UTF-8")
Sys.Date()
Sys.getlocale("LC_TIME")
bye()
Sys.setlocale("LC_MESSAGES", 'en_GB.UTF-8')
Sys.setenv(LANG = "en_US.UTF-8")
Sys.setlocale("LC_MESSAGES", 'en_GB.UTF-8')
Sys.setlocale("LC_MESSAGES", 'en_GB.UTF-8')
Sys.getlocale("LC_TIME")
setwd("D:\\FRANGOS_FOLDER/CoursesCertificates/Coursera_Spec_DataAnalysis_2016/GettingAndCleaningData/project/")
source('D:/FRANGOS_FOLDER/CoursesCertificates/Coursera_Spec_DataAnalysis_2016/GettingAndCleaningData/project/run_analysis.R')
source('D:/FRANGOS_FOLDER/CoursesCertificates/Coursera_Spec_DataAnalysis_2016/GettingAndCleaningData/project/run_analysis.R')
source('D:/FRANGOS_FOLDER/CoursesCertificates/Coursera_Spec_DataAnalysis_2016/GettingAndCleaningData/project/run_analysis.R')
debugSource('D:/FRANGOS_FOLDER/CoursesCertificates/Coursera_Spec_DataAnalysis_2016/GettingAndCleaningData/project/run_analysis.R')
df_mean$activity <- mapvalues(df_mean$activity, from = activity.indx , to = activity.labels )
activity.indx
activity.labels
class(activity.labels)
df_mean$activity
mapvalues(df_mean$activity, from = activity.indx , to = activity.labels )
debugSource('D:/FRANGOS_FOLDER/CoursesCertificates/Coursera_Spec_DataAnalysis_2016/GettingAndCleaningData/project/run_analysis.R')
Q
debugSource('D:/FRANGOS_FOLDER/CoursesCertificates/Coursera_Spec_DataAnalysis_2016/GettingAndCleaningData/project/run_analysis.R')
df_mean
